generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id                 String           @id @default(uuid()) @db.Uuid
  repository         RepositorySource
  title              String
  state              String           @default("open")
  createdAt          DateTime
  updatedAt          DateTime
  closedAt           DateTime?
  authorAssociation  String?
  type               String?
  body               String
  companyName        String?
  companyDomain      String?
  companyIcon        String?
  hasSalaryInfo      Boolean          @default(false)
  location           String?
  subscriptionAction String?
  companyId          String?          @db.Uuid
  Company            Company?         @relation(fields: [companyId], references: [id])
  labels             Label[]          @relation("JobLabels")
}

model Label {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  color       String
  description String?
  jobs        Job[]   @relation("JobLabels")
}

model Company {
  id     String  @id @default(uuid()) @db.Uuid
  name   String
  domain String?
  icon   String?
  jobs   Job[]
}

enum RepositorySource {
  GITHUB
  FRONTENDBR
  LINKEDIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // usado para login por credentials
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
